{"version":3,"file":"static/js/996.7f5bcae7.chunk.js","mappings":"0UACA,EAAuB,+BAAvB,EAA8D,gCAA9D,EAA6G,uCAA7G,EAAmK,uCAAnK,EAA4N,0CAA5N,EAA+Q,iC,oBCezQA,EAAiBC,EAAAA,GAAW,CAEhCC,MAAOD,EAAAA,KAAaC,MAAM,iBAAiBC,SAAS,uBACpDC,SAAUH,EAAAA,KAAaE,SAAS,0BAiB5BE,EAAO,CAEXH,MAAO,GACPE,SAAU,IAICE,EAAmB,WAC5B,IAAMC,GAAWC,EAAAA,EAAAA,MACnB,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAGMC,EAA0B,kBAAMD,GAAgB,SAAAE,GAAI,OAAKA,CAAL,GAA1B,EAI1BC,GAAWC,EAAAA,EAAAA,MACXC,EAAgB,mCAAG,WAAMC,GAAN,8EAEjBZ,EAAO,CAEXH,MAAOe,EAAOf,MACdE,SAAUa,EAAOb,UALI,SAOlBU,GAASI,EAAAA,EAAAA,IAAMb,IAPG,OAQvBE,EAAS,SARc,2CAAH,sDAWtB,OACE,+BACE,SAAC,KAAD,CACEY,cAAed,EACfe,SAAUJ,EACVK,iBAAkBrB,EAHpB,SAKG,gBAAGiB,EAAH,EAAGA,OAAQK,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,aAA1C,OACC,UAAC,KAAD,CAAMC,UAAWC,EAAUP,SAAUI,EAArC,WACE,eAAIE,UAAWC,EAAf,oBA4BA,SAACC,EAAA,EAAD,CACEC,GAAI,CACFC,aAAc,OACdC,QAAS,OACTC,WAAY,YAJhB,UAOE,SAACC,EAAA,EAAD,CACEC,KAAK,QACLC,KAAK,QACLC,MAAM,QACNC,KAAK,QACLC,WAAS,EACTT,GAAI,CACF,2BAA4B,CAC1B,aAAc,CACZU,aAAc,GACdC,OAAO,uBAIbC,SAAUhB,EACViB,MAAOzB,EAAOf,MACdyC,MAAOpB,EAAQrB,OAAS0C,QAAQtB,EAAOpB,OACvC2C,WAAYtB,EAAQrB,OAASoB,EAAOpB,WAGxC,SAAC0B,EAAA,EAAD,CACEC,GAAI,CACFC,aAAc,OACdC,QAAS,OACTC,WAAY,YAJhB,UAOE,SAACC,EAAA,EAAD,CACEC,KAAK,WACLC,KAAMzB,EAAe,OAAS,WAC9B0B,MAAM,WACNC,KAAK,QACLC,WAAS,EACTT,GAAI,CACF,2BAA4B,CAC1B,aAAc,CACZU,aAAc,GACdC,OAAO,uBAIbM,WAAY,CACVC,cACE,SAACC,EAAA,EAAD,CACE,aAAW,6BACXC,QAASrC,EACTsC,KAAK,MACLb,KAAK,QAJP,SAMG3B,GACC,SAACyC,EAAA,EAAD,CAAYC,MAAO,CAAEC,MAAOC,EAAAA,EAAAA,SAE5B,SAACC,EAAA,EAAD,CAAeH,MAAO,CAAEC,MAAOC,EAAAA,EAAAA,WAMvCb,SAAUhB,EACViB,MAAOzB,EAAOb,SACduC,MAAOpB,EAAQnB,UAAYwC,QAAQtB,EAAOlB,UAC1CyC,WAAYtB,EAAQnB,UAAYkB,EAAOlB,cAgD3C,gBAAKsB,UAAWC,EAAhB,UACE,mBAAQQ,KAAK,SAAST,UAAWC,EAAjC,sBAIF,eAAGD,UAAWC,EAAd,mCACyB,KACvB,SAAC,KAAD,CAAM6B,GAAG,YAAY9B,UAAWC,EAAhC,2BAzJL,KAkKR,EC/ND,EARkB,WAChB,OACE,+BACE,SAACrB,EAAD,KAGL,ECGD,EATkB,WAEhB,OACE,+BACE,SAAC,EAAD,KAGL,C","sources":["webpack://your-pet-frontend/./src/modules/LoginForm/loginFormDetails.module.css?1418","modules/LoginForm/LoginFormDetails.jsx","modules/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"loginFormDetails_form__LwEfY\",\"title\":\"loginFormDetails_title__T9-5m\",\"questionText\":\"loginFormDetails_questionText__n6Ojt\",\"registerLink\":\"loginFormDetails_registerLink__jYgjs\",\"buttonContainer\":\"loginFormDetails_buttonContainer__TyGgH\",\"button\":\"loginFormDetails_button__WhIag\"};","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\nimport { Formik, Form } from 'formik';\nimport * as yup from 'yup';\n\nimport { TextField, IconButton, Box } from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { blue } from '@mui/material/colors';\n\nimport css from './loginFormDetails.module.css';\n\nimport { login } from 'redux/auth/auth-operations';\n\nconst registerSchema = yup.object({\n  //name: yup.string().required('Name is required'),\n  email: yup.string().email('Invalid email').required('Enter a valid Email'),\n  password: yup.string().required('Password is required'),\n  // .matches(/^[^ ]{7,32}$/, 'Password should not contain space')\n  // .matches(\n  //   /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{7,})/,\n  //   'Password is not valid as per password policy'\n  // )\n  // .max(32),\n\n  // confirmPassword: yup.string().required('Confirm password is required'),\n  // .when('password', {\n  //   is: val => (val && val.length > 0 ? true : false),\n  //   then: yup\n  //     .string()\n  //     .oneOf([yup.ref('password')], 'Both password need to be the same'),\n  // }),\n});\n\nconst data = {\n  //name: '',\n  email: '',\n  password: '',\n  //confirmPassword: '',\n};\n\nexport const LoginFormDetails = () => {\n    const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n // const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const handleClickShowPassword = () => setShowPassword(show => !show);\n//   const handleClickShowConfirmPassword = () =>\n//     setShowConfirmPassword(show => !show);\n\n  const dispatch = useDispatch();\n  const handleFormSubmit = async values => {\n    // console.log(values);\n    const data = {\n      //name: values.name,\n      email: values.email,\n      password: values.password,\n    };\n   await dispatch(login(data));\n    navigate('/user');\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={data}\n        onSubmit={handleFormSubmit}\n        validationSchema={registerSchema}\n      >\n        {({ values, errors, touched, handleSubmit, handleChange }) => (\n          <Form className={css.form} onSubmit={handleSubmit}>\n            <h2 className={css.title}>Login</h2>\n            {/* <Box\n              sx={{\n                marginBottom: '10px',\n                display: 'flex',\n                alignItems: 'flex-end',\n              }}\n            >\n              <TextField\n                name=\"name\"\n                type=\"text\"\n                label=\"Name\"\n                size=\"small\"\n                fullWidth\n                sx={{\n                  '& .MuiOutlinedInput-root': {\n                    '& fieldset': {\n                      borderRadius: 40,\n                      border: `1px solid #54ADFF`,\n                    },\n                  },\n                }}\n                onChange={handleChange}\n                value={values.name}\n                error={touched.name && Boolean(errors.name)}\n                helperText={touched.name && errors.name}\n              />\n            </Box> */}\n            <Box\n              sx={{\n                marginBottom: '10px',\n                display: 'flex',\n                alignItems: 'flex-end',\n              }}\n            >\n              <TextField\n                name=\"email\"\n                type=\"email\"\n                label=\"Email\"\n                size=\"small\"\n                fullWidth\n                sx={{\n                  '& .MuiOutlinedInput-root': {\n                    '& fieldset': {\n                      borderRadius: 40,\n                      border: `1px solid #54ADFF`,\n                    },\n                  },\n                }}\n                onChange={handleChange}\n                value={values.email}\n                error={touched.email && Boolean(errors.email)}\n                helperText={touched.email && errors.email}\n              />\n            </Box>\n            <Box\n              sx={{\n                marginBottom: '10px',\n                display: 'flex',\n                alignItems: 'flex-end',\n              }}\n            >\n              <TextField\n                name=\"password\"\n                type={showPassword ? 'text' : 'password'}\n                label=\"Password\"\n                size=\"small\"\n                fullWidth\n                sx={{\n                  '& .MuiOutlinedInput-root': {\n                    '& fieldset': {\n                      borderRadius: 40,\n                      border: `1px solid #54ADFF`,\n                    },\n                  },\n                }}\n                InputProps={{\n                  endAdornment: (\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={handleClickShowPassword}\n                      edge=\"end\"\n                      size=\"small\"\n                    >\n                      {showPassword ? (\n                        <Visibility style={{ color: blue[300] }} />\n                      ) : (\n                        <VisibilityOff style={{ color: blue[300] }} />\n                      )}\n                      {}\n                    </IconButton>\n                  ),\n                }}\n                onChange={handleChange}\n                value={values.password}\n                error={touched.password && Boolean(errors.password)}\n                helperText={touched.password && errors.password}\n              />\n            </Box>\n            {/* <Box\n              sx={{\n                marginBottom: '10px',\n                display: 'flex',\n                alignItems: 'flex-end',\n              }}\n            >\n              <TextField\n                name=\"confirmPassword\"\n                type={showConfirmPassword ? 'text' : 'password'}\n                label=\"Confirm password\"\n                size=\"small\"\n                fullWidth\n                sx={{\n                  '& .MuiOutlinedInput-root': {\n                    '& fieldset': {\n                      borderRadius: 40,\n                      border: `1px solid #54ADFF`,\n                    },\n                  },\n                }}\n                InputProps={{\n                  endAdornment: (\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={handleClickShowConfirmPassword}\n                      edge=\"end\"\n                      size=\"small\"\n                    >\n                      {showConfirmPassword ? (\n                        <Visibility style={{ color: blue[300] }} />\n                      ) : (\n                        <VisibilityOff style={{ color: blue[300] }} />\n                      )}\n                    </IconButton>\n                  ),\n                }}\n                onChange={handleChange}\n                value={values.confirmPassword}\n                error={\n                  touched.confirmPassword && Boolean(errors.confirmPassword)\n                }\n                helperText={touched.confirmPassword && errors.confirmPassword}\n              />\n            </Box> */}\n            <div className={css.buttonContainer}>\n              <button type=\"submit\" className={css.button}>\n                Login\n              </button>\n            </div>\n            <p className={css.questionText}>\n              Don't have an account?{' '}\n              <Link to=\"/register\" className={css.registerLink}>\n                Register\n              </Link>\n            </p>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n","import { LoginFormDetails } from './LoginFormDetails';\n\nconst LoginForm = () => {\n  return (\n    <>\n      <LoginFormDetails />\n    </>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from '../../modules/LoginForm/LoginForm';\n\nconst LoginPage = () => {\n\n  return (\n    <>\n      <LoginForm/>\n    </>\n  );\n};\n\nexport default LoginPage;"],"names":["registerSchema","yup","email","required","password","data","LoginFormDetails","navigate","useNavigate","useState","showPassword","setShowPassword","handleClickShowPassword","show","dispatch","useDispatch","handleFormSubmit","values","login","initialValues","onSubmit","validationSchema","errors","touched","handleSubmit","handleChange","className","css","Box","sx","marginBottom","display","alignItems","TextField","name","type","label","size","fullWidth","borderRadius","border","onChange","value","error","Boolean","helperText","InputProps","endAdornment","IconButton","onClick","edge","Visibility","style","color","blue","VisibilityOff","to"],"sourceRoot":""}