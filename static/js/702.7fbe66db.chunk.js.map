{"version":3,"file":"static/js/702.7fbe66db.chunk.js","mappings":"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","sources":["webpack://your-pet-frontend/./src/modules/Notices/NoticesSearch/NoticesSearch.module.css?a893","modules/Notices/NoticesSearch/NoticesSearch.jsx","icons/PlusIcon.jsx","webpack://your-pet-frontend/./src/modules/Notices/NoticesCategoriesNav/NoticesCategoriesNav.module.css?448c","modules/Notices/NoticesCategoriesNav/NoticesCategoriesNav.jsx","shared/components/Pagination/PaginationNotices.jsx","webpack://your-pet-frontend/./src/pages/NoticesPage/NoticesPage.module.css?b3b0","pages/NoticesPage/NoticesPage.jsx","webpack://your-pet-frontend/./src/shared/components/ScrollButton/ScrollButton.module.css?a74b","shared/components/ScrollButton/ScrollButton.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"placeholder\":\"NoticesSearch_placeholder__7c0Oy\",\"inputContainer\":\"NoticesSearch_inputContainer__q9qO2\",\"title\":\"NoticesSearch_title__eWVAT\"};","import React, { useState, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { InputAdornment, IconButton, Input, Typography } from '@mui/material';\nimport { Search, Clear } from '@mui/icons-material';\nimport {\n  fetchAllFavoriteNotices,\n  fetchNoticesByCategory,\n  fetchNoticesByOwn,\n} from 'redux/notices/noticesOperations';\nimport { selectCategory } from 'redux/notices/noticesSelectors';\nimport { useLocation } from 'react-router-dom';\n\nimport css from '../NoticesSearch/NoticesSearch.module.css';\n\nconst NoticesSearch = () => {\n  const dispatch = useDispatch();\n  const [keyword, setKeyword] = useState('');\n  const location = useLocation();\n  const categoryIsLoginUser = location.pathname.split('/')[2];\n  const category = useSelector(selectCategory);\n\n  const handleClear = useCallback(() => {\n    setKeyword('');\n    setShowHelperText(false);\n  }, []);\n\n  const handleKeywordChange = useCallback(e => {\n    setKeyword(e.target.value);\n    setShowHelperText(false);\n  }, []);\n\n  const handleSubmit = useCallback(\n    e => {\n      e.preventDefault();\n      const trimmedKeyword = keyword.trim();\n\n      if (trimmedKeyword === '') {\n        setShowHelperText(true);\n        return;\n      }\n\n      try {\n        if (categoryIsLoginUser === 'own') {\n          dispatch(fetchNoticesByOwn(trimmedKeyword, 1));\n        } else if (categoryIsLoginUser === 'favorite') {\n          dispatch(fetchAllFavoriteNotices(trimmedKeyword, 1));\n        } else if (category) {\n          dispatch(\n            fetchNoticesByCategory({\n              categoryName: category,\n              query: trimmedKeyword,\n              page: 1,\n            })\n          );\n        }\n      } catch (error) {\n        console.log(error);\n      } \n    },\n    [category, categoryIsLoginUser, dispatch, keyword]\n  );\n\n  const [showHelperText, setShowHelperText] = useState(false);\n\n  return (\n    <div className={css.inputContainer}>\n      <form onSubmit={handleSubmit}>\n        <Input\n          value={keyword}\n          onChange={handleKeywordChange}\n          placeholder=\"Search\"\n          disableUnderline\n          style={{\n            borderRadius: '20px',\n            backgroundColor: '#FFFFFF',\n            padding: '0px 14px 0px 20px',\n            height: '43px',\n            boxShadow: '3px 8px 14px rgba(136, 198, 253, 0.19)',\n          }}\n          inputProps={{\n            className: css.placeholder,\n          }}\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <IconButton type=\"submit\" style={{ color: '#54ADFF' }}>\n                <Search />\n              </IconButton>\n              {keyword && (\n                <IconButton onClick={handleClear} style={{ color: '#FFC107' }}>\n                  <Clear />\n                </IconButton>\n              )}\n            </InputAdornment>\n          }\n          fullWidth\n        />\n        {showHelperText && (\n          <Typography\n            variant=\"caption\"\n            color=\"error\"\n            marginLeft=\"20px\"\n            fontSize=\"16px\"\n          >\n            Please enter something.\n          </Typography>\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default React.memo(NoticesSearch);\n\n\n","import * as React from 'react';\n\nfunction PlusIcon(props) {\n  return (\n    <svg\n      width={20}\n      height={20}\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M12 20v-8m0 0V4m0 8h8m-8 0H4\"\n        stroke={props.color}\n        strokeWidth={1.5}\n          />\n    </svg>\n  );\n}\n\nexport default PlusIcon;\n","// extracted by mini-css-extract-plugin\nexport default {\"navList\":\"NoticesCategoriesNav_navList__gDHKd\",\"navLink\":\"NoticesCategoriesNav_navLink__D31Pg\",\"active\":\"NoticesCategoriesNav_active__lp+RN\",\"wrapper\":\"NoticesCategoriesNav_wrapper__TZJWJ\",\"btnContainer\":\"NoticesCategoriesNav_btnContainer__ilOeR\",\"btn\":\"NoticesCategoriesNav_btn__r-ijg\",\"pulse-animation\":\"NoticesCategoriesNav_pulse-animation__a4lNI\",\"iconBtn\":\"NoticesCategoriesNav_iconBtn__MNr6s\"};","import React from 'react';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoggedIn } from 'redux/auth/auth-selectors';\nimport * as toasty from '../../../shared/toastify/toastify';\n// import Filter from '../Filter/Filter';\nimport PlusIcon from 'icons/PlusIcon';\n\nimport css from './NoticesCategoriesNav.module.css';\n\nconst link = [\n  { to: 'sell', text: 'sell' },\n  { to: 'lost-found', text: 'lost/found' },\n  { to: 'for-free', text: 'in good hands' },\n];\n\nconst getClassNameLink = ({ isActive }) => {\n  const className = isActive ? `${css.navLink} ${css.active}` : css.navLink;\n  return className;\n};\n\nconst NoticesCategoriesNav = ({ onOwnClick, onFavoriteClick }) => {\n  const navigate = useNavigate();\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  const handleClick = () => {\n    if (!isLoggedIn) {\n      toasty.toastInfo('You must be logged in');\n      return;\n    } else {\n      navigate('/add-pet');\n    }\n  };\n\n  return (\n    <div className={css.wrapper}>\n      <ul className={css.navList}>\n        {link.map(element => (\n          <li key={element.to}>\n            <NavLink\n              to={element.to}\n              className={getClassNameLink}\n              // onClick={() => {\n              //   handleCategoryClick(element.to);\n              // }}\n            >\n              {element.text}\n            </NavLink>\n          </li>\n        ))}\n        {isLoggedIn && (\n          <>\n            <li key=\"own\">\n              <NavLink\n                to=\"own\"\n                className={getClassNameLink}\n                onClick={() => {\n                  onOwnClick();\n                }}\n              >\n                my ads\n              </NavLink>\n            </li>\n            <li key=\"favorite\">\n              <NavLink\n                to=\"favorite\"\n                className={getClassNameLink}\n                onClick={() => {\n                  onFavoriteClick();\n                }}\n              >\n                favorite ads\n              </NavLink>\n            </li>\n          </>\n        )}\n      </ul>\n      <div className={css.btnContainer}>\n        {/* <Filter /> */}\n        <button className={css.btn} onClick={handleClick}>\n          Add Pet <PlusIcon color=\"#FEF9F9\" className={css.iconBtn} />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default NoticesCategoriesNav;\n","import React from 'react';\nimport { Stack, Pagination, PaginationItem } from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\n\nconst PaginationNotices = ({\n  totalPages,\n  currentCategory,\n  ownCurrentPage,\n  favoriteCurrentPage,\n  onPageChange,\n  currentPage,\n}) => {\n  const currentPageInit =\n    currentCategory === 'own'\n      ? ownCurrentPage\n      : currentCategory === 'favorite'\n      ? favoriteCurrentPage\n      : currentPage;\n\n  const handlePageChange = (event, page) => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n    onPageChange(page);\n  };\n\n  return (\n    <Stack spacing={2}>\n      {totalPages > 1 && (\n        <Pagination\n          count={totalPages}\n          page={currentPageInit}\n          color=\"primary\"\n          variant=\"outlined\"\n          onChange={handlePageChange}\n          sx={{\n            marginX: 'auto',\n            marginBottom: '20px',\n            boxShadow: '3px 8px 14px rgba(136, 198, 253, 0.19)',\n            borderRadius: '45px',\n            padding: '8px 12px',\n            background: '#FEF9F9',\n          }}\n          renderItem={item => (\n            <PaginationItem\n              sx={{\n                '&.Mui-selected': {\n                  background: '#54ADFF',\n                  color: '#FEF9F9',\n                  border: 'none',\n                },\n                background: '#FEF9F9',\n                color: '#CCE4FB',\n                borderColor: '#CCE4FB',\n              }}\n              icon={\n                item.type === 'previous' ? (\n                  <ArrowBackIcon />\n                ) : (\n                  <ArrowForwardIcon />\n                )\n              }\n              component=\"button\"\n              onClick={e => handlePageChange(e, item.page)}\n              selected={item.page === currentPage}\n              {...item}\n            />\n          )}\n        />\n      )}\n    </Stack>\n  );\n};\n\nexport default PaginationNotices;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"NoticesPage_title__oGlUk\"};","import React, { useEffect, useState } from 'react';\nimport { Outlet, useLocation } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  fetchNoticesByCategory,\n  fetchNoticesByOwn,\n  fetchAllFavoriteNotices,\n} from '../../redux/notices/noticesOperations';\nimport {\n  getAllNotices,\n  selectNoticesLoading,\n  selectNoticesTotalPages,\n  // selectCategory,\n  selectNoticesPage,\n} from '../../redux/notices/noticesSelectors';\n// import { getFavorite } from 'redux/auth/auth-selectors';\n\nimport NoticesSearch from 'modules/Notices/NoticesSearch/NoticesSearch';\nimport NoticesCategoriesNav from 'modules/Notices/NoticesCategoriesNav/NoticesCategoriesNav';\nimport PaginationNotices from 'shared/components/Pagination/PaginationNotices';\n\nimport css from '../NoticesPage/NoticesPage.module.css';\nimport Loader from 'shared/components/Loader/Loader';\nimport ScrollButton from 'shared/components/ScrollButton/ScrollButton';\n\nconst NoticesPage = () => {\n  const dispatch = useDispatch();\n  const notices = useSelector(getAllNotices);\n  const loading = useSelector(selectNoticesLoading);\n  const totalPages = useSelector(selectNoticesTotalPages);\n  const currentPage = useSelector(selectNoticesPage);\n  const location = useLocation();\n  const currentCategory = location.pathname.split('/')[2];\n  // const currentCategory = useSelector(selectCategory);\n\n  const [ownCurrentPage, setOwnCurrentPage] = useState(1);\n  const [favoriteCurrentPage, setFavoriteCurrentPage] = useState(1);\n  // const favoriteNotice = useSelector(getFavorite);\n  // console.log(favoriteNotice);\n  // useEffect(() => {\n  //   if (currentCategory === 'own') {\n  //     dispatch(fetchNoticesByOwn({ query: '', page: 1 }));\n  //     return;\n  //   } else if (currentCategory === 'favorite') {\n  //     dispatch(fetchAllFavoriteNotices({ query: '', page: 1 }));\n  //     return;\n  //   } else {\n  //     dispatch(\n  //       fetchNoticesByCategory({\n  //         categoryName: currentCategory,\n  //         query: '',\n  //         page: 1,\n  //       })\n  //     );\n  //   }\n  // }, [dispatch, currentCategory]);\n\n  // useEffect(() => {\n  //   if (currentCategory !== 'sell') {\n  //     return;\n  //   }\n  //   if (currentCategory === 'sell') {\n  //     dispatch(\n  //       fetchNoticesByCategory({\n  //         categoryName: 'sell',\n  //         query: '',\n  //         page: 1,\n  //       })\n  //     );\n  //   }\n  // }, [dispatch, currentCategory]);\n\n  useEffect(() => {\n    if (currentCategory === 'sell') {\n      dispatch(\n        fetchNoticesByCategory({\n          categoryName: 'sell',\n          query: '',\n          page: 1,\n        })\n      );\n      return;\n    }\n    if (currentCategory === 'for-free') {\n      dispatch(\n        fetchNoticesByCategory({\n          categoryName: 'for-free',\n          query: '',\n          page: 1,\n        })\n      );\n      return;\n    }\n    if (currentCategory === 'lost-found') {\n      dispatch(\n        fetchNoticesByCategory({\n          categoryName: 'lost-found',\n          query: '',\n          page: 1,\n        })\n      );\n      return;\n    }\n    if (currentCategory === 'own') {\n      dispatch(fetchNoticesByOwn({ query: '', page: ownCurrentPage }));\n      return;\n    }\n    if (currentCategory === 'favorite') {\n      dispatch(\n        fetchAllFavoriteNotices({ query: '', page: favoriteCurrentPage })\n      );\n      return;\n    }\n  }, [currentCategory, dispatch, ownCurrentPage, favoriteCurrentPage]);\n\n  const onPageChange = page => {\n    if (currentCategory === 'own') {\n      dispatch(fetchNoticesByOwn({ query: '', page }));\n      return;\n    } else if (currentCategory === 'favorite') {\n      dispatch(fetchAllFavoriteNotices({ query: '', page }));\n      return;\n    } else {\n      dispatch(\n        fetchNoticesByCategory({\n          categoryName: currentCategory,\n          query: '',\n          page,\n        })\n      );\n    }\n  };\n\n  // const handleCategoryClick = categoryName => {\n  //   dispatch(\n  //     fetchNoticesByCategory({\n  //       categoryName,\n  //       query: '',\n  //       page: 1,\n  //     })\n  //   );\n  // };\n\n  const handleOwnClick = () => {\n    dispatch(fetchNoticesByOwn({ query: '', page: ownCurrentPage }));\n  };\n\n  const handleFavoriteClick = () => {\n    dispatch(fetchAllFavoriteNotices({ query: '', page: favoriteCurrentPage }));\n  };\n\n  const handleOwnPageChange = page => {\n    setOwnCurrentPage(page);\n    dispatch(fetchNoticesByOwn({ query: '', page }));\n  };\n\n  const handleFavoritePageChange = page => {\n    setFavoriteCurrentPage(page);\n    dispatch(fetchAllFavoriteNotices({ query: '', page }));\n  };\n\n  return (\n    <div className=\"container\">\n      <h2 className={css.title}>Find your favorite pet</h2>\n      <NoticesSearch />\n      <NoticesCategoriesNav\n      // handleCategoryClick={handleCategoryClick}\n      // onPageChange={onPageChange}\n      onOwnClick={handleOwnClick}\n      onFavoriteClick={handleFavoriteClick}\n      />\n      {loading && <Loader />}\n      {notices && <Outlet />}\n\n      <PaginationNotices\n        currentPage={currentPage}\n        totalPages={totalPages}\n        currentCategory={currentCategory}\n        ownCurrentPage={ownCurrentPage}\n        favoriteCurrentPage={favoriteCurrentPage}\n        onPageChange={page => {\n          if (currentCategory === 'own') {\n            handleOwnPageChange(page);\n          } else if (currentCategory === 'favorite') {\n            handleFavoritePageChange(page);\n          } else {\n            onPageChange(page);\n          }\n        }}\n      />\n      <ScrollButton />\n    </div>\n  );\n};\n\nexport default NoticesPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"scrollButton\":\"ScrollButton_scrollButton__NLri3\"};","import React, { useState, useEffect } from 'react';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\n\nimport css from './ScrollButton.module.css';\n\nconst ScrollButton = () => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrolled = window.pageYOffset;\n      if (scrolled > 300) {\n        setIsVisible(true);\n      } else {\n        setIsVisible(false);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  return (\n    <>\n      {isVisible && (\n        <div className={css.scrollButton} onClick={scrollToTop}>\n          <KeyboardArrowUpIcon fontSize='large' />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ScrollButton;\n"],"names":["NoticesSearch","dispatch","useDispatch","useState","keyword","setKeyword","categoryIsLoginUser","useLocation","pathname","split","category","useSelector","selectCategory","handleClear","useCallback","setShowHelperText","handleKeywordChange","e","target","value","handleSubmit","preventDefault","trimmedKeyword","trim","fetchNoticesByOwn","fetchAllFavoriteNotices","fetchNoticesByCategory","categoryName","query","page","error","console","log","showHelperText","className","css","onSubmit","Input","onChange","placeholder","disableUnderline","style","borderRadius","backgroundColor","padding","height","boxShadow","inputProps","endAdornment","InputAdornment","position","IconButton","type","color","Search","onClick","Clear","fullWidth","Typography","variant","marginLeft","fontSize","React","props","width","fill","xmlns","d","stroke","strokeWidth","link","to","text","getClassNameLink","isActive","onOwnClick","onFavoriteClick","navigate","useNavigate","isLoggedIn","selectIsLoggedIn","map","element","toasty","totalPages","currentCategory","ownCurrentPage","favoriteCurrentPage","onPageChange","currentPage","currentPageInit","handlePageChange","event","window","scrollTo","top","behavior","Stack","spacing","Pagination","count","sx","marginX","marginBottom","background","renderItem","item","PaginationItem","border","borderColor","icon","ArrowBack","ArrowForward","component","selected","notices","getAllNotices","loading","selectNoticesLoading","selectNoticesTotalPages","selectNoticesPage","setOwnCurrentPage","setFavoriteCurrentPage","useEffect","Loader","handleOwnPageChange","handleFavoritePageChange","ScrollButton","isVisible","setIsVisible","handleScroll","scrolled","pageYOffset","addEventListener","removeEventListener","KeyboardArrowUp"],"sourceRoot":""}